{"__opam_nix_env":{},"__opam_nix_regen":["opam-nix-gen","-p","opam-ed","-p","ocaml-system"],"base-bigarray":{"description":"\nBigarray library distributed with the OCaml compiler\n","files-contents":{},"isLocal":false,"maintainer":"https://github.com/ocaml/opam-repository/issues","name":"base-bigarray","opam-version":"2.0","version":"base"},"base-domains":{"depends":[{"lhs":{"conditions":[{"arg":"5.0","prefix_relop":"geq"}],"val":"ocaml"},"logop":"or","rhs":{"conditions":[{"lhs":{"lhs":{"lhs":{"lhs":{"lhs":{"arg":"4.14.0+domains","prefix_relop":"eq"},"logop":"or","rhs":{"arg":"4.12.0+domains+effects","prefix_relop":"eq"}},"logop":"or","rhs":{"arg":"4.12.0+domains","prefix_relop":"eq"}},"logop":"or","rhs":{"arg":"4.10.0+multicore","prefix_relop":"eq"}},"logop":"or","rhs":{"arg":"4.10.0+multicore+no-effect-syntax","prefix_relop":"eq"}},"logop":"or","rhs":{"arg":"4.06.1+multicore","prefix_relop":"eq"}}],"val":"ocaml-variants"}}],"description":"\nDomains-based parallelism distributed with the Multicore OCaml compiler\"\n","files-contents":{},"isLocal":false,"maintainer":"https://github.com/ocaml-multicore/multicore-opam/issues","name":"base-domains","opam-version":"2.0","version":"base"},"base-nnp":{"depends":{"lhs":{"lhs":"base-domains","logop":"or","rhs":"ocaml-option-nnp"},"logop":"or","rhs":{"conditions":[{"arg":"4.06.1+no-naked-pointers+flambda","prefix_relop":"eq"}],"val":"ocaml-variants"}},"description":"\nInstalled when the compiler does not permit naked pointers in\nthe heap. Prior to OCaml 5.00.0, this mode was expressly selected\nby configuring with --disable-naked-pointers. The shared memory\nparallelism added in OCaml 5.00.0 requires this mode.\n","files-contents":{},"isLocal":false,"maintainer":"https://github.com/ocaml/opam-repository/issues","name":"base-nnp","opam-version":"2.0","synopsis":"Naked pointers prohibited in the OCaml heap","version":"base"},"base-threads":{"description":"\nThreads library distributed with the OCaml compiler\n","files-contents":{},"isLocal":false,"maintainer":"https://github.com/ocaml/opam-repository/issues","name":"base-threads","opam-version":"2.0","version":"base"},"base-unix":{"description":"\nUnix library distributed with the OCaml compiler\n","files-contents":{},"isLocal":false,"maintainer":"https://github.com/ocaml/opam-repository/issues","name":"base-unix","opam-version":"2.0","version":"base"},"cmdliner":{"authors":"The cmdliner programmers","bug-reports":"https://github.com/dbuenzli/cmdliner/issues","build":[{"id":"make"},"all","PREFIX=%{prefix}%"],"depends":[{"conditions":[{"arg":"4.08.0","prefix_relop":"geq"}],"val":"ocaml"}],"description":"Cmdliner allows the declarative definition of command line interfaces\nfor OCaml.\n\nIt provides a simple and compositional mechanism to convert command\nline arguments to OCaml values and pass them to your functions. The\nmodule automatically handles syntax errors, help messages and UNIX man\npage generation. It supports programs with single or multiple commands\nand respects most of the [POSIX][1] and [GNU][2] conventions.\n\nCmdliner has no dependencies and is distributed under the ISC license.\n\n[1]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html\n[2]: http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n\nHome page: http://erratique.ch/software/cmdliner","dev-repo":"git+https://erratique.ch/repos/cmdliner.git","doc":"https://erratique.ch/software/cmdliner/doc","files-contents":{},"homepage":"https://erratique.ch/software/cmdliner","install":[[{"id":"make"},"install","LIBDIR=%{_:lib}%","DOCDIR=%{_:doc}%"],[{"id":"make"},"install-doc","LIBDIR=%{_:lib}%","DOCDIR=%{_:doc}%"]],"isLocal":false,"license":"ISC","maintainer":"Daniel Bünzli <daniel.buenzl i@erratique.ch>","name":"cmdliner","opam-version":"2.0","synopsis":"Declarative definition of command line interfaces for OCaml","tags":["cli","system","declarative","org:erratique"],"url":{"section":{"checksum":"sha512=6fcd6a59a6fbc6986b1aecdc3e4ce7a0dc43c65a16b427d6caa5504b10b51384f6b0bc703af646b09f5f1caeb6827b37d4480ce350ca8006204c850785f2810b","src":"https://erratique.ch/software/cmdliner/releases/cmdliner-1.2.0.tbz"}},"version":"1.2.0"},"ocaml":{"authors":["Xavier Leroy","Damien Doligez","Alain Frisch","Jacques Garrigue","Didier Rémy","Jérôme Vouillon"],"bug-reports":"https://github.com/ocaml/opam-repository/issues","build":["ocaml","%{ocaml-config:share}%/gen_ocaml_config.ml",{"id":"_:version"},{"id":"_:name"}],"build-env":[[{"lhs":{"id":"CAML_LD_LIBRARY_PATH"},"relop":"eq","rhs":""}],[{"lhs":{"id":"LSAN_OPTIONS"},"relop":"eq","rhs":"detect_leaks=0,exitcode=0"}],[{"lhs":{"id":"ASAN_OPTIONS"},"relop":"eq","rhs":"detect_leaks=0,exitcode=0"}]],"depends":[{"conditions":[{"arg":"3","prefix_relop":"geq"}],"val":"ocaml-config"},{"lhs":{"lhs":{"conditions":[{"lhs":{"arg":"5.0.0~","prefix_relop":"geq"},"logop":"and","rhs":{"arg":"5.0.1~","prefix_relop":"lt"}}],"val":"ocaml-base-compiler"},"logop":"or","rhs":{"conditions":[{"lhs":{"arg":"5.0.0~","prefix_relop":"geq"},"logop":"and","rhs":{"arg":"5.0.1~","prefix_relop":"lt"}}],"val":"ocaml-variants"}},"logop":"or","rhs":{"conditions":[{"lhs":{"arg":"5.0.0","prefix_relop":"geq"},"logop":"and","rhs":{"arg":"5.0.1~","prefix_relop":"lt"}}],"val":"ocaml-system"}}],"description":"\nThis package requires a matching implementation of OCaml,\nand polls it to initialise specific variables like `ocaml:native-dynlink`","files-contents":{},"flags":{"id":"conf"},"homepage":"https://ocaml.org","isLocal":false,"license":"LGPL-2.1-or-later WITH OCaml-LGPL-linking-exception","maintainer":"platform@lists.ocaml.org","name":"ocaml","opam-version":"2.0","setenv":[[{"lhs":{"id":"CAML_LD_LIBRARY_PATH"},"relop":"eq","rhs":"%{_:stubsdir}%"}],[{"env_update":"prepend","lhs":{"id":"CAML_LD_LIBRARY_PATH"},"rhs":"%{lib}%/stublibs"}],[{"lhs":{"id":"OCAML_TOPLEVEL_PATH"},"relop":"eq","rhs":"%{toplevel}%"}]],"synopsis":"The OCaml compiler (virtual package)","version":"5.0.0"},"ocaml-config":{"authors":["Louis Gesbert <louis.gesbert@ocamlpro.com>","David Allsopp <david.allsopp@metastack.com>"],"bug-reports":"https://github.com/ocaml/opam/issues","depends":[{"lhs":{"lhs":{"lhs":{"conditions":[{"lhs":{"arg":"5.0.0~","prefix_relop":"geq"},"logop":"or","rhs":{"lhs":{"id":"os"},"relop":"eq","rhs":"win32"}}],"val":"ocaml-base-compiler"},"logop":"or","rhs":{"conditions":[{"lhs":{"arg":"5.0.0~","prefix_relop":"geq"},"logop":"or","rhs":{"lhs":{"id":"os"},"relop":"eq","rhs":"win32"}}],"val":"ocaml-variants"}},"logop":"or","rhs":{"conditions":[{"lhs":{"arg":"5.0.0~","prefix_relop":"geq"},"logop":"or","rhs":{"lhs":{"id":"os"},"relop":"eq","rhs":"win32"}}],"val":"ocaml-system"}},"logop":"or","rhs":{"conditions":[{"arg":"4.12.0~","prefix_relop":"geq"}],"val":"dkml-base-compiler"}}],"description":"\nThis package is used by the OCaml package to set-up its variables.","extra-files":[["gen_ocaml_config.ml.in","md5=c0a50fb1f6ffe7a48bf8600e83ae6d38"],["ocaml-config.install","md5=8e50c5e2517d3463b3aad649748cafd7"]],"files-contents":{"gen_ocaml_config.ml.in":"let () =\n  let ocaml_version =\n    let v = Sys.ocaml_version in\n    let l = String.length v in\n    let plus = try String.index v '+' with Not_found -> l in\n    (* Introduced in 4.11.0; used from 4.12.0 *)\n    let tilde = try String.index v '~' with Not_found -> l in\n    String.sub v 0 (min (min plus tilde) l)\n  in\n  if ocaml_version <> Sys.argv.(1) then\n    (Printf.eprintf\n       \"OCaml version mismatch: %%s, expected %s\"\n       ocaml_version Sys.argv.(1);\n     exit 1)\n  else\n  let oc = open_out (Sys.argv.(2) ^ \".config\") in\n  let exe = \".exe\" in\n  let (ocaml, suffix) =\n    let s = Sys.executable_name in\n    if Filename.check_suffix s exe then\n      (Filename.chop_suffix s exe, exe)\n    else\n      (s, \"\")\n  in\n  let ocamlc = ocaml^\"c\"^suffix in\n  let libdir =\n    if Sys.command (ocamlc^\" -where > where\") = 0 then\n      (* Must be opened in text mode for Windows *)\n      let ic = open_in \"where\" in\n      let r = input_line ic in\n      close_in ic; r\n    else\n      failwith \"Bad return from 'ocamlc -where'\"\n  in\n  let stubsdir =\n    let ic = open_in (Filename.concat libdir \"ld.conf\") in\n    let rec r acc = try r (input_line ic::acc) with End_of_file -> acc in\n    let lines = List.rev (r []) in\n    close_in ic;\n    let sep = if Sys.os_type = \"Win32\" then \";\" else \":\" in\n    String.concat sep lines\n  in\n  let has_native_dynlink =\n    let check_dir libdir =\n      Sys.file_exists (Filename.concat libdir \"dynlink.cmxa\")\n    in\n    List.exists check_dir [Filename.concat libdir \"dynlink\"; libdir]\n  in\n  let p fmt = Printf.fprintf oc (fmt ^^ \"\\n\") in\n  p \"opam-version: \\\"2.0\\\"\";\n  p \"variables {\";\n  p \"  native: %%b\"\n    (Sys.file_exists (ocaml^\"opt\"^suffix));\n  p \"  native-tools: %%b\"\n    (* The variable [ocamlc] already has a suffix on Windows\n       (ex. '...\\bin\\ocamlc.exe') so we use [ocaml] to check *)\n    (Sys.file_exists (ocaml^\"c.opt\"^suffix));\n  p \"  native-dynlink: %%b\"\n    has_native_dynlink;\n  p \"  stubsdir: %%S\"\n    stubsdir;\n  p \"  preinstalled: %{ocaml-system:installed}%\";\n  p \"  compiler: \\\"%{ocaml-system:installed?system:}%%{ocaml-base-compiler:version}%%{dkml-base-compiler:version}%%{ocaml-variants:version}%%{ocaml-option-32bit:installed?+32bit:}%%{ocaml-option-afl:installed?+afl:}%%{ocaml-option-bytecode-only:installed?+bytecode-only:}%%{ocaml-option-default-unsafe-string:installed?+default-unsafe-string:}%%{ocaml-option-fp:installed?+fp:}%%{ocaml-option-flambda:installed?+flambda:}%%{ocaml-option-musl:installed?+musl:}%%{ocaml-option-nnp:installed?+nnp:}%%{ocaml-option-no-flat-float-array:installed?+no-flat-float-array:}%%{ocaml-option-spacetime:installed?+spacetime:}%%{ocaml-option-static:installed?+static:}%\\\"\";\n  p \"}\";\n  close_out oc\n","ocaml-config.install":"share: [\"gen_ocaml_config.ml\"]\n"},"homepage":"https://opam.ocaml.org/","isLocal":false,"license":"ISC","maintainer":"platform@lists.ocaml.org","name":"ocaml-config","opam-version":"2.0","substs":"gen_ocaml_config.ml","synopsis":"OCaml Switch Configuration","version":"3"},"ocaml-system":{"authors":"Xavier Leroy and many contributors","available":{"lhs":{"id":"sys-ocaml-version"},"relop":"eq","rhs":"5.0.0"},"bug-reports":"https://github.com/ocaml/opam-repository/issues","build":["ocaml","gen_ocaml_config.ml"],"conflict-class":"ocaml-core-compiler","depends":[{"conditions":[{"id":"post"}],"val":"ocaml"},{"conditions":[{"id":"post"}],"val":"base-unix"},{"conditions":[{"id":"post"}],"val":"base-threads"},{"conditions":[{"id":"post"}],"val":"base-bigarray"},{"conditions":[{"id":"post"}],"val":"base-domains"},{"conditions":[{"id":"post"}],"val":"base-nnp"}],"dev-repo":"git+https://github.com/ocaml/ocaml","extra-files":["gen_ocaml_config.ml.in","md5=093e7bec1ec95f9e4c6a313d73c5d840"],"files-contents":{"gen_ocaml_config.ml.in":"let () =\n  let exe = \".exe\" in\n  let ocamlc =\n    let (base, suffix) =\n      let s = Sys.executable_name in\n      if Filename.check_suffix s exe then\n        (Filename.chop_suffix s exe, exe)\n      else\n        (s, \"\") in\n    base ^ \"c\" ^ suffix in\n  if Sys.ocaml_version <> \"%{_:version}%\" then\n    (Printf.eprintf\n       \"ERROR: The compiler found at %%s has version %%s,\\n\\\n        and this package requires %{_:version}%.\\n\\\n        You should use e.g. 'opam switch create %{_:name}%.%%s' \\\n        instead.\"\n       ocamlc Sys.ocaml_version Sys.ocaml_version;\n     exit 1)\n  else\n  let ocamlc_digest = Digest.to_hex (Digest.file ocamlc) in\n  let libdir =\n    if Sys.command (ocamlc^\" -where > %{_:name}%.config\") = 0 then\n      let ic = open_in \"%{_:name}%.config\" in\n      let r = input_line ic in\n      close_in ic;\n      Sys.remove \"%{_:name}%.config\";\n      r\n    else\n      failwith \"Bad return from 'ocamlc -where'\"\n  in\n  let graphics = Filename.concat libdir \"graphics.cmi\" in\n  let graphics_digest =\n    if Sys.file_exists graphics then\n      Digest.to_hex (Digest.file graphics)\n    else\n      String.make 32 '0'\n  in\n  let oc = open_out \"%{_:name}%.config\" in\n  Printf.fprintf oc \"opam-version: \\\"2.0\\\"\\n\\\n                     file-depends: [ [ %%S %%S ] [ %%S %%S ] ]\\n\\\n                     variables { path: %%S }\\n\"\n    ocamlc ocamlc_digest graphics graphics_digest (Filename.dirname ocamlc);\n  close_out oc\n"},"flags":{"id":"compiler"},"homepage":"https://ocaml.org","isLocal":false,"license":"LGPL-2.1-or-later WITH OCaml-LGPL-linking-exception","maintainer":"platform@lists.ocaml.org","name":"ocaml-system","opam-version":"2.0","substs":"gen_ocaml_config.ml","synopsis":"The OCaml compiler (system version, from outside of opam)","version":"5.0.0"},"ocamlfind":{"authors":"Gerd Stolpmann <gerd@gerd-stolpmann.de>","available":{"lhs":{"id":"os"},"relop":"neq","rhs":"win32"},"bug-reports":"https://github.com/ocaml/ocamlfind/issues","build":[["./configure","-bindir",{"id":"bin"},"-sitelib",{"id":"lib"},"-mandir",{"id":"man"},"-config","%{lib}%/findlib.conf","-no-custom",{"conditions":[{"lhs":{"arg":{"id":"ocaml:preinstalled"},"pfxop":"not"},"logop":"and","rhs":{"lhs":{"id":"ocaml:version"},"relop":"geq","rhs":"4.02.0"}}],"val":"-no-camlp4"},{"conditions":[{"id":"ocaml:preinstalled"}],"val":"-no-topfind"}],[{"id":"make"},"all"],{"conditions":[{"id":"ocaml:native"}],"val":[{"id":"make"},"opt"]}],"depends":[{"conditions":[{"arg":"3.08.0","prefix_relop":"geq"}],"val":"ocaml"}],"depopts":["graphics"],"description":"\nFindlib is a library manager for OCaml. It provides a convention how\nto store libraries, and a file format (\"META\") to describe the\nproperties of libraries. There is also a tool (ocamlfind) for\ninterpreting the META files, so that it is very easy to use libraries\nin programs and scripts.\n","dev-repo":"git+https://github.com/ocaml/ocamlfind.git","extra-files":["0001-Harden-test-for-OCaml-5.patch","md5=3cddbf72164c29d4e50e077a92a37c6c"],"files-contents":{"0001-Harden-test-for-OCaml-5.patch":"diff a/configure b/configure\n--- a/configure\n+++ b/configure\n@@ -294,7 +294,7 @@\n     # If findlib has been configured -sitelib $(ocamlc -where) then there's\n     # nothing to do, but otherwise we need to put OCaml's Standard Library\n     # into the path setting.\n-    if [ ! -e \"${ocaml_sitelib}/stdlib/META\" ]; then\n+    if [ ! -e \"${ocaml_sitelib}/stdlib.cmi\" ]; then\n         ocamlpath=\"${ocaml_core_stdlib}${path_sep}${ocamlpath}\"\n     fi\n fi\n"},"homepage":"http://projects.camlcity.org/projects/findlib.html","install":[[{"id":"make"},"install"],{"conditions":[{"id":"ocaml:preinstalled"}],"val":["install","-m","0755","ocaml-stub","%{bin}%/ocaml"]}],"isLocal":false,"license":"MIT","maintainer":"Thomas Gazagnaire <thomas@gazagnaire.org>","name":"ocamlfind","opam-version":"2.0","patches":["0001-Harden-test-for-OCaml-5.patch"],"synopsis":"A library manager for OCaml","url":{"section":{"checksum":["md5=96c6ee50a32cca9ca277321262dbec57","sha512=cfaf1872d6ccda548f07d32cc6b90c3aafe136d2aa6539e03143702171ee0199add55269bba894c77115535dc46a5835901a5d7c75768999e72db503bfd83027"],"src":"http://download.camlcity.org/download/findlib-1.9.6.tar.gz"}},"version":"1.9.6"},"opam-ed":{"authors":"Louis Gesbert <louis.gesbert@ocamlpro.com>","bug-reports":"https://github.com/AltGr/opam-ed/issues","build":[{"id":"make"},{"conditions":[{"arg":{"id":"ocaml:native"},"pfxop":"not"}],"val":"COMP=ocamlc"}],"depends":[{"conditions":[{"arg":"4.03.0","prefix_relop":"geq"}],"val":"ocaml"},{"conditions":[{"id":"build"}],"val":"ocamlfind"},{"conditions":[{"arg":"1.0.0","prefix_relop":"geq"}],"val":"cmdliner"},{"conditions":[{"lhs":{"arg":"2.0.0","prefix_relop":"geq"},"logop":"and","rhs":{"arg":"2.1","prefix_relop":"lt"}}],"val":"opam-file-format"}],"description":"\nopam-ed can read and write files in the general opam syntax. It provides a small CLI with some useful commands for mechanically extracting or modifying the file contents.\n\nThe specification for the syntax itself is available at:\n    http://opam.ocaml.org/doc/Manual.html#Common-file-format\n","dev-repo":"git+https://github.com/AltGr/opam-ed.git","files-contents":{},"homepage":"https://github.com/AltGr/opam-ed","isLocal":false,"license":"LGPL-2.1-only WITH OCaml-LGPL-linking-exception","maintainer":"Louis Gesbert <louis.gesbert@ocamlpro.com>","name":"opam-ed","opam-version":"2.0","synopsis":"Command-line edition tool for handling the opam file syntax","url":{"section":{"checksum":["md5=29757044dec336ceed80b528a5d5717e","sha512=97ab5404a6b3c69628626232544069030cafb9daac85a1a6342f878e69678972180667613778c508ef87f19c2477938333eda41f713cca40af5376900dda7360"],"src":"https://github.com/AltGr/opam-ed/archive/0.3.tar.gz"}},"version":"0.3"},"opam-file-format":{"authors":"Louis Gesbert <louis.gesbert@ocamlpro.com>","bug-reports":"https://github.com/ocaml/opam-file-format/issues","build":[{"id":"make"},{"conditions":[{"arg":{"id":"ocaml:native"},"pfxop":"not"}],"val":"byte"},{"conditions":[{"id":"ocaml:native"}],"val":"all"}],"depends":["ocaml"],"dev-repo":"git+https://github.com/ocaml/opam-file-format","files-contents":{},"flags":{"id":"light-uninstall"},"homepage":"https://opam.ocaml.org","install":[{"id":"make"},"install","PREFIX=%{prefix}%"],"isLocal":false,"license":"LGPL-2.1-only WITH OCaml-LGPL-linking-exception","maintainer":"Louis Gesbert <louis.gesbert@ocamlpro.com>","name":"opam-file-format","opam-version":"2.0","remove":["rm","-rf","%{opam-file-format:lib}%"],"synopsis":"Parser and printer for the opam file syntax","url":{"section":{"checksum":"md5=d7852cb63df0f442bed14ba2c5740135","src":"https://github.com/ocaml/opam-file-format/archive/2.0.0.tar.gz"}},"version":"2.0.0"}}