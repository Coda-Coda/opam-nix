#!@runtimeShell@

set -euo pipefail

cmd="$(basename "$0")"

usage() {
    {
        echo "$cmd: Resolve opam packages and produce a JSON file suitable for consumption by materializedDefsToScope"
        echo "Usage: $cmd [-r <REPO-URL> ...] [-l <DIRECTORY> ...] [-e VAR=VALUE ...] [-p NAME[.VERSION] ...] <-p NAME[.VERSION] | NAME DIRECTORY>"
        echo "  Options:"
        echo "    -r: Add a remote repository to the resolver context"
        echo "    -l: Add a repository made from a local directory to the resolver context"
        echo "    -e: Add an opam environment binding to the resolver context"
        echo "    -p: Add a package to the resolver context"
        echo "  (optional) Positional arguments:"
        echo "    NAME: project's name"
        echo "    DIRECTORY: project's directory"
        echo "  (note: the project's directory must contain <NAME>.opam file)"
        echo "  Examples:"
        echo "    Resolve a package called `my-package`, the source of which is in the current directory, and write the defs to `package-defs.json`:"
        echo "      $cmd my-package . package-defs.json"
    } > /dev/stderr
    exit 1
}

processPackage() {
    name="${1%.*}"
    version="${1#*.}"
    if [[ "$name" == "$version" ]]; then
        # No version was supplied
        printf '"%s" = null' "$name"
    else
        printf '"%s" = "%s"' "$name" "$version"
    fi
}

processProject() {
    if [[ -n "${1-}" ]] && [[ -n "${2-}" ]]; then
        name="${1}"
        directory="${2}"
    elif [[ -n "${1-}" ]]; then
        echo "Missing project directory" 2>&1
        usage
    fi
}

regenCommand="\"$cmd\""
for arg in "$@"; do
    regenCommand="$regenCommand \"$arg\""
done
regenCommand="regenCommand = [$regenCommand];"

repos="(builtins.fetchTarball \"https://github.com/ocaml/opam-repository/archive/master.tar.gz\")"

query=""

while getopts ":r:l:e:p:" o; do
    case "${o}" in
        r)
            repos="${repos-}${repos+ }(builtins.fetchTree \"${OPTARG}\")"
            ;;
        l)
            repos="${repos-}${repos+ }(makeOpamRepo $(realpath "${OPTARG}"))"
            ;;
        e)
            env="${env-}${env+ }${OPTARG};"
            ;;
        p)
            query="${query-}${query+ }$(processPackage "${OPTARG}");"
            ;;
        *) usage
    esac
done
shift $((OPTIND-1))

repos="${repos+repos = [}${repos-}${repos+];}"
env="${env+env = {}${env-}${env+\};}"

currentSystem="$(nix eval --impure --raw --expr builtins.currentSystem)"


if [ "$#" -ge 2 ]; then
    name="$1"
    directory="$(realpath "$2")"
    shift 2
    out="${1-/dev/stdout}"
    cat "$(nix eval --impure --raw @opamNix@#lib.$currentSystem --apply "(m: with m; materializeOpamProject { $repos $env $regenCommand } \"$name\" $directory { $query })")" > "$out"
else
    if [ -z "${query-}" ]; then
        echo "Must supply at least one package (-p) option or project NAME and DIRECTORY as positional arguments" 2>&1
        usage
    fi
    out="${1-/dev/stdout}"
    cat "$(nix eval --impure --raw @opamNix@#lib.$currentSystem --apply "(m: with m; materialize { $repos $env $regenCommand } { $query })")" > "$out"
fi
